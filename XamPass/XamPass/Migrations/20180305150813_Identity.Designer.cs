// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using XamPass.Models;
using XamPass.Models.DataBaseModels;

namespace XamPass.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20180305150813_Identity")]
    partial class Identity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("XamPass.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("XamPass.Models.DataBaseModels.DtAnswer", b =>
                {
                    b.Property<int>("AnswerID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<int?>("DtQuestionQuestionID");

                    b.Property<DateTime>("SubmissionDate");

                    b.Property<int>("UpVotes");

                    b.HasKey("AnswerID");

                    b.HasIndex("DtQuestionQuestionID");

                    b.ToTable("dt_answer");
                });

            modelBuilder.Entity("XamPass.Models.DataBaseModels.DtCountry", b =>
                {
                    b.Property<int>("CountryID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CountryName")
                        .HasMaxLength(100);

                    b.HasKey("CountryID");

                    b.ToTable("dt_Country");
                });

            modelBuilder.Entity("XamPass.Models.DataBaseModels.DtFederalState", b =>
                {
                    b.Property<int>("FederalStateID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FederalStateName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("FederalStateID");

                    b.ToTable("dt_federal_state");
                });

            modelBuilder.Entity("XamPass.Models.DataBaseModels.DtFieldOfStudies", b =>
                {
                    b.Property<int>("FieldOfStudiesID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FieldOfStudiesName");

                    b.Property<int>("Type");

                    b.HasKey("FieldOfStudiesID");

                    b.ToTable("dt_field_of_studies");
                });

            modelBuilder.Entity("XamPass.Models.DataBaseModels.DtQuestion", b =>
                {
                    b.Property<int>("QuestionID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<int>("FieldOfStudiesID");

                    b.Property<int>("SubjectID");

                    b.Property<DateTime>("SubmissionDate");

                    b.Property<string>("Title")
                        .HasMaxLength(250);

                    b.Property<int?>("UniversityID");

                    b.Property<int>("UpVotes");

                    b.HasKey("QuestionID");

                    b.HasIndex("FieldOfStudiesID");

                    b.HasIndex("SubjectID");

                    b.HasIndex("UniversityID");

                    b.ToTable("dt_question");
                });

            modelBuilder.Entity("XamPass.Models.DataBaseModels.DtSubject", b =>
                {
                    b.Property<int>("SubjectID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("SubjectName");

                    b.HasKey("SubjectID");

                    b.ToTable("dt_subject");
                });

            modelBuilder.Entity("XamPass.Models.DataBaseModels.DtUniversity", b =>
                {
                    b.Property<int>("UniversityID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CountryID");

                    b.Property<int>("FederalStateID");

                    b.Property<string>("UniversityName")
                        .HasMaxLength(100);

                    b.HasKey("UniversityID");

                    b.HasIndex("CountryID");

                    b.HasIndex("FederalStateID");

                    b.ToTable("dt_University");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("XamPass.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("XamPass.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("XamPass.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("XamPass.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("XamPass.Models.DataBaseModels.DtAnswer", b =>
                {
                    b.HasOne("XamPass.Models.DataBaseModels.DtQuestion")
                        .WithMany("Answers")
                        .HasForeignKey("DtQuestionQuestionID");
                });

            modelBuilder.Entity("XamPass.Models.DataBaseModels.DtQuestion", b =>
                {
                    b.HasOne("XamPass.Models.DataBaseModels.DtFieldOfStudies", "FieldOfStudies")
                        .WithMany()
                        .HasForeignKey("FieldOfStudiesID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("XamPass.Models.DataBaseModels.DtSubject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("XamPass.Models.DataBaseModels.DtUniversity", "University")
                        .WithMany()
                        .HasForeignKey("UniversityID");
                });

            modelBuilder.Entity("XamPass.Models.DataBaseModels.DtUniversity", b =>
                {
                    b.HasOne("XamPass.Models.DataBaseModels.DtCountry", "Country")
                        .WithMany()
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("XamPass.Models.DataBaseModels.DtFederalState", "FederalState")
                        .WithMany()
                        .HasForeignKey("FederalStateID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
